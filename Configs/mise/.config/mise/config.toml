# curl https://mise.jdx.dev/mise-latest-macos-arm64 -o $HOME/.local/bin/mise

[settings]
experimental = true
trusted_config_paths = [
    "~/.config/mise/config.toml",
    "~/dotfiles/.config/mise/config.toml",
]

[env]
_.file = "~/.config/mise/.env"

[tools]
# Languages
go = "latest"
node = "latest"
deno = "latest"
bun = "latest"
rust = "latest"
python = "3.12" # Leaving this as 3.12 instead of 3.13 as gsutil commands are pinned to 3.12 currently
# ruby = "latest" <-- this bastard doesn't compile on my macbook... will figure it out later when I need it again...
dart = "latest"
flutter = "latest"
lua = "5.1" # Leaving this as 5.1 as Neovim requires 5.1 for now.
terraform = "latest"
pnpm = "latest" # Node Package Manager

# Mise Tools
usage = "latest" # Required for CLI Completions for with mise
pipx = "latest" # Python package manager - required for mise backend

# TUI
lazygit = "latest"
lazydocker = "latest"

# CLI Tools
gcloud = "latest" # mise plugins add gcloud https://github.com/mise-plugins/mise-gcloud.git 
yq = "latest" # YAML processor
jq = "latest" # JSON processor
gh = "latest" # Github CLI
gitleaks = "latest" # Security Scanner for Git Repositories
tokei = "latest" # Code Counter based on language
zoxide = "latest" # Smart CD Tool

# Neovim Tools
fzf = "latest" # Fuzzy Finder
fd = "latest" # File Searcher
ripgrep = "latest" # Search Tool using regex
# neovim = "latest"
# tree-sitter = "latest" # File Tree Sitter
# luajit = "latest" # Lua JIT Compiler

"go:github.com/air-verse/air" = { version = "latest" } 
"go:github.com/GoogleCloudPlatform/cloud-sql-proxy/v2" = { version = "latest" } 
"go:github.com/swaggo/swag/cmd/swag" = { version = "latest" }
"go:github.com/charmbracelet/freeze" = { version = "latest" }
"go:github.com/charmbracelet/vhs" = { version = "latest" }

"npm:@dataform/cli" = "latest" 
# "npm:renovate" = "latest"

"pipx:sqlfluff/sqlfluff" = "latest" # used for Dataform Extension to lint SQLX files

"cargo:tuckr" = "latest"

# Homebrew Tasks
[tasks.bundle-update]
description = "Runs Update, Upgrade, Cleanup and Autoremove for Brew"
run = """
brew update
brew upgrade
brew cleanup
brew autoremove
"""

# Google Cloud Tasks
[tasks.set-gcp-project]
description = "Sets the active Google Cloud project and ADC quota project."
usage = '''
arg "<project_id>" "The Google Cloud Project ID to set."
'''
run = "$HOME/.config/mise/scripts/set_gcp_project.sh {{arg(name='project_id')}}"

# Git Tasks
[tasks.pull-all-repos]
description = "Uses Git to pull all changes for repositories listed in the $HOME/code directory"
run = "$HOME/.config/mise/scripts/pull_github_status.sh"

[tasks.check-all-repos]
description = "Uses Git to perform a status check for repositories listed in the $HOME/code directory"
run = "$HOME/.config/mise/scripts/check_github_status.sh"

[tasks.banish-ds-store]
description = "Kills DS_Store from current directory and adds it to .gitignore"
dir = "{{cwd}}"
run = """
find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
echo .DS_Store >> .gitignore
git add .gitignore
git commit -m ':fire: .DS_Store banished!'
git push
"""

[tasks.empty-commit]
description = "Pushes and empty commit for CI/CD testing"
dir = "{{cwd}}"
run = """
git add -A
git commit --allow-empty -m ':sparkles: :rocket:'
git push
"""

# Terraform Tasks
[tasks.terraform-init]
description = "Runs Terraform fmt, init and validation"
dir = "{{cwd}}"
run = """
terraform fmt -recursive
terraform init
terraform validate
"""

[tasks.terraform-auto-apply]
depends = ["terraform-init"]
dir = "{{cwd}}"
description = "Runs Terraform Apply without approvals (plus pre-cursor checks)"
run = """
terraform apply --auto-approve
"""

[tasks.terraform-apply]
depends = ["terraform-init"]
dir = "{{cwd}}"
description = "Runs Terraform Apply (plus pre-cursor checks)"
run = """
terraform apply
"""

[tasks.terraform-plan]
depends = ["terraform-init"]
dir = "{{cwd}}"
description = "Runs Terraform plan (plus pre-cursor checks)"
run = """
terraform plan
"""

[tasks.terraform-console]
depends = ["terraform-init"]
dir = "{{cwd}}"
description = "Runs Terraform console (plus pre-cursor checks)"
run = """
terraform console
"""
